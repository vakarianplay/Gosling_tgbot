package main

import (
	"log"
	"os"
	"strconv"
	"strings"

	tb "gopkg.in/tucnak/telebot.v2"
)

var userFile string

var markdown *tb.SendOptions

func doesIDExist(userID int) bool {

	content, err := os.ReadFile(userFile)
	if err != nil {
		log.Println(err)
		return false
	}

	lines := strings.Split(string(content), "\n")

	for _, line := range lines {
		id, _ := strconv.Atoi(line)
		if id == userID {
			return true
		}
	}
	return false
}

func saveUser(userID int) {
	if !doesIDExist(userID) {
		file, err := os.OpenFile(userFile, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0644)
		if err != nil {
			log.Println(err)
			return
		}
		defer file.Close()

		_, err = file.WriteString(strconv.Itoa(userID) + "\n")
		if err != nil {
			log.Println(err)
			return
		}

		log.Println("Add new user:", userID)
	}
}

func sendUsers(bot *tb.Bot, m *tb.Message) {
	content, err := os.ReadFile(userFile)
	if err != nil {
		log.Println(err)
	}
	str := string(content)
	lines := strings.Split(str, "\n")
	count := strconv.Itoa(len(lines))
	log.Println("Users count: " + count)
	bot.Send(m.Sender, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤:\n*"+count+"*", markdown)

}

func sendInfo(bot *tb.Bot, m *tb.Message) {
	firstLine := "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏ mGPT, –æ–±—É—á–µ–Ω–Ω–æ–π –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –∏–∑ _—Ñ–∏–ª–æ—Å–æ–≤—Å–∫–∏—Ö –∏ –ø–∞—Ü–∞–Ω—Å–∫–∏—Ö_ —Ü–∏—Ç–∞—Ç–Ω–∏–∫–æ–≤. –ö–∞—Ä—Ç–∏–Ω–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã Stable Diffusion."
	secondLine := "*–ê–≤—Ç–æ—Ä: https://t.me/cyberbibki*\n\n–°–∞–π—Ç –∞–≤—Ç–æ—Ä–∞: https://vakarian.website\nGitHub: https://github.com/vakarianplay \n\n üåê–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN: *https://raspad.space/vpn*\n\n"
	thirdLine := "–ë–æ—Ç —Å —Ñ—Ä–∞–∑–∞–º–∏ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: *@neuralbisakbot*"

	bot.Send(m.Sender, firstLine, markdown)
	bot.Send(m.Sender, secondLine+thirdLine, markdown)
	// bot.Send(m.Sender, thirdLine, markdown)
}

func sendGoslingPic(bot *tb.Bot, m *tb.Message) {
	msg, _ := bot.Send(m.Sender, "‚åõÔ∏è–ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ì–æ—Å–ª–∏–Ω–≥ –¥—É–º–∞–µ—Ç...")
	outStr()

	file, err := os.Open("out.png")
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞:", err)
	}
	defer file.Close()

	caption := "üåÖ –ú—É–¥—Ä–æ—Å—Ç—å –æ—Ç –ì–æ—Å–ª–∏–Ω–≥–∞ _@goslingatorbot_"

	photo := &tb.Photo{File: tb.FromReader(file), Caption: caption}

	bot.Send(m.Sender, photo, markdown)
	bot.Delete(msg)
}

func sendGoslingLine(bot *tb.Bot, m *tb.Message) {
	bot.Send(m.Sender, getLineTst()+"\n\n_@goslingatorbot_", markdown)
}

func telegramBot(botApi, userFile_ string) {

	userFile = userFile_

	actions := map[string]func(bot *tb.Bot, m *tb.Message){
		"üíé –ì–æ—Å–ª–∏–Ω–≥, –¥–∞–π –º–Ω–µ –º—É–¥—Ä–æ—Å—Ç—å üíé": sendGoslingPic,
		"‚Ñπ –û –±–æ—Ç–µ ‚Ñπ":              sendInfo,
		"‚ú® –ì–æ—Å–ª–∏–Ω–≥, –¥–∞–π —Ü–∏—Ç–∞—Ç—É ‚ú®": sendGoslingLine,
		"–Æ–∑–µ—Ä—ã": sendUsers,
	}

	botToken := botApi

	menu := &tb.ReplyMarkup{ResizeReplyKeyboard: true}
	btnSendPic := menu.Text("üíé –ì–æ—Å–ª–∏–Ω–≥, –¥–∞–π –º–Ω–µ –º—É–¥—Ä–æ—Å—Ç—å üíé")
	btnAbout := menu.Text("‚Ñπ –û –±–æ—Ç–µ ‚Ñπ")
	btnGetLine := menu.Text("‚ú® –ì–æ—Å–ª–∏–Ω–≥, –¥–∞–π —Ü–∏—Ç–∞—Ç—É ‚ú®")

	menu.Reply(
		menu.Row(btnSendPic, btnGetLine),
		menu.Row(btnAbout),
	)

	markdown = &tb.SendOptions{
		ParseMode: tb.ModeMarkdown,
	}

	bot, err := tb.NewBot(tb.Settings{
		Token:  botToken,
		Poller: &tb.LongPoller{Timeout: 10},
	})
	if err != nil {
		log.Fatal(err)
	}

	bot.Handle(tb.OnUserJoined, func(m *tb.Message) {
		saveUser(int(m.Sender.ID))
	})

	bot.Handle("/start", func(m *tb.Message) {

		saveUser(int(m.Sender.ID))
		userName := m.Sender.FirstName + " " + m.Sender.LastName
		bot.Send(m.Sender, "*–ü—Ä–∏–≤–µ—Ç, "+userName+"*\n\n_–≠—Ç–æ—Ç –±–æ—Ç - –º—É–¥—Ä–æ—Å—Ç—å –†–∞–π–∞–Ω–∞ –ì–æ—Å–ª–∏–Ω–≥–∞._\n–ü—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –¥–∞—Ç—å —Ç–µ–±–µ –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç.", markdown)
		bot.Send(m.Sender, "üåê–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN: *https://raspad.space/vpn https://t.me/raspad_vpn*", markdown)
		bot.Send(m.Sender, "‚Üì –≤—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì", menu)

	})

	bot.Handle(tb.OnText, func(m *tb.Message) {

		_, ok := actions[m.Text]
		if ok {
			actions[m.Text](bot, m)
		} else {
			bot.Send(m.Sender, "_–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é_", markdown)
		}
	})

	bot.Start()
}
