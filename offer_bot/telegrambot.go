package main

import (
	"encoding/csv"
	"fmt"
	"log"
	"os"
	"strconv"
	"time"

	tb "gopkg.in/tucnak/telebot.v2"
)

var userFile string
var contentDir string
var markdown *tb.SendOptions

func doesIDExist(userID int) bool {
	file, err := os.Open(userFile)
	if err != nil {
		return false
	}
	defer file.Close()

	reader := csv.NewReader(file)
	records, err := reader.ReadAll()
	if err != nil {
		return false
	}

	for _, record := range records {
		if len(record) > 0 {
			id, err := strconv.Atoi(record[0])
			if err != nil {
				continue
			}
			if id == userID {
				return true
			}
		}
	}

	return false
}

func saveUser(m *tb.Message) {
	if !doesIDExist(int(m.Sender.ID)) {
		file, err := os.OpenFile(userFile, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0644)
		if err != nil {
			log.Println(err)
			return
		}
		defer file.Close()

		name := m.Sender.FirstName + " " + m.Sender.LastName
		_, err = file.WriteString(strconv.Itoa(int(m.Sender.ID)) + "," + m.Sender.Username + "," + name + "\n")
		if err != nil {
			log.Println(err)
			return
		}

		log.Println("Add new user:", m.Sender.ID)
	}
}

func handlePhoto(bot *tb.Bot, m *tb.Message) {
	msg, _ := bot.Send(m.Sender, "‚åõÔ∏è–ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
	user := m.Sender
	userID := user.ID

	photo := m.Photo
	if photo == nil {
		bot.Send(user, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
		return
	}

	currentTime := time.Now().Format("2006-01-02_15-04-05")
	fileName := fmt.Sprintf("/%s_%d.jpg", currentTime, userID)
	fileName = contentDir + fileName
	log.Println(fileName)

	err := os.MkdirAll(contentDir, os.ModePerm)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", err)
		return
	}

	err = bot.Download(&photo.File, fileName)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err)
		return
	}

	bot.Send(user, "–ú–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
	bot.Delete(msg)
	log.Println("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:", fileName)
}

func handleGif(bot *tb.Bot, m *tb.Message) {
	msg, _ := bot.Send(m.Sender, "‚åõÔ∏è–ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
	user := m.Sender
	userID := user.ID

	animation := m.Animation
	if animation == nil {
		bot.Send(user, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ GIF-—Ñ–∞–π–ª–∞.")
		return
	}

	currentTime := time.Now().Format("2006-01-02_15-04-05")
	fileName := fmt.Sprintf("/%s_%d.gif", currentTime, userID)
	fileName = contentDir + fileName
	log.Println(fileName)

	err := os.MkdirAll(contentDir, os.ModePerm)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", err)
		return
	}

	err = bot.Download(&animation.File, fileName)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ GIF-—Ñ–∞–π–ª–∞:", err)
		return
	}

	bot.Send(user, "GIF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
	bot.Delete(msg)
	log.Println("GIF —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:", fileName)
}

func handleVideo(bot *tb.Bot, m *tb.Message) {
	msg, _ := bot.Send(m.Sender, "‚åõÔ∏è–ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
	user := m.Sender
	userID := user.ID

	video := m.Video
	if video == nil {
		bot.Send(user, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.")
		return
	}

	currentTime := time.Now().Format("2006-01-02_15-04-05")
	fileName := fmt.Sprintf("/%s_%d.mp4", currentTime, userID)
	fileName = contentDir + fileName
	log.Println(fileName)

	err := os.MkdirAll(contentDir, os.ModePerm)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", err)
		return
	}

	err = bot.Download(&video.File, fileName)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞:", err)
		return
	}

	bot.Send(user, "–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	bot.Delete(msg)
	log.Println("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:", fileName)
}

func TelegramBot(botApi, content_, users_ string) {

	userFile = users_
	contentDir = content_

	// actions := map[string]func(bot *tb.Bot, m *tb.Message){
	// 	"üíé –ì–æ—Å–ª–∏–Ω–≥, –¥–∞–π –º–Ω–µ –º—É–¥—Ä–æ—Å—Ç—å üíé": sendGoslingPic,
	// 	"‚Ñπ –û –±–æ—Ç–µ ‚Ñπ":              sendInfo,
	// 	"‚ú® –ì–æ—Å–ª–∏–Ω–≥, –¥–∞–π —Ü–∏—Ç–∞—Ç—É ‚ú®": sendGoslingLine,
	// 	"–Æ–∑–µ—Ä—ã": sendUsers,
	// }

	botToken := botApi

	// menu := &tb.ReplyMarkup{ResizeReplyKeyboard: true}
	// btnSendPic := menu.Text("üíé –ì–æ—Å–ª–∏–Ω–≥, –¥–∞–π –º–Ω–µ –º—É–¥—Ä–æ—Å—Ç—å üíé")
	// btnAbout := menu.Text("‚Ñπ –û –±–æ—Ç–µ ‚Ñπ")
	// btnGetLine := menu.Text("‚ú® –ì–æ—Å–ª–∏–Ω–≥, –¥–∞–π —Ü–∏—Ç–∞—Ç—É ‚ú®")

	// menu.Reply(
	// 	menu.Row(btnSendPic, btnGetLine),
	// 	menu.Row(btnAbout),
	// )

	markdown = &tb.SendOptions{
		ParseMode: tb.ModeMarkdown,
	}

	bot, err := tb.NewBot(tb.Settings{
		Token:  botToken,
		Poller: &tb.LongPoller{Timeout: 10},
	})
	if err != nil {
		log.Fatal(err)
	}

	bot.Handle(tb.OnUserJoined, func(m *tb.Message) {
		saveUser(m)
	})

	bot.Handle("/start", func(m *tb.Message) {

		saveUser(m)
		userName := m.Sender.FirstName + " " + m.Sender.LastName
		bot.Send(m.Sender, "*–ü—Ä–∏–≤–µ—Ç, "+userName+"*\n\n_–≠—Ç–æ—Ç –±–æ—Ç - –ø—Ä–µ–¥–ª–æ–∂–∫–∞._\n–ü—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å —Å—é–¥–∞ –º–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–æ—Å—Ç–∏—Ç—å.", markdown)
		bot.Send(m.Sender, "üåê–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN: *https://raspad.space/vpn https://t.me/raspad_vpn*", markdown)
		// bot.Send(m.Sender, "‚Üì –≤—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì", menu)

	})

	bot.Handle(tb.OnText, func(m *tb.Message) {

		bot.Send(m.Sender, "_–ë–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç_\n–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ gif'–∫—É", markdown)
	})

	bot.Handle(tb.OnPhoto, func(m *tb.Message) {
		handlePhoto(bot, m)
	})

	bot.Handle(tb.OnAnimation, func(m *tb.Message) {
		handleGif(bot, m)
	})

	bot.Handle(tb.OnVideo, func(m *tb.Message) {
		handleVideo(bot, m)
	})

	bot.Handle(tb.OnDocument, func(m *tb.Message) {
		bot.Send(m.Sender, "_–ë–æ—Ç —ç—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç_\n–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ gif'–∫—É", markdown)
	})

	bot.Handle(tb.OnAudio, func(m *tb.Message) {
		bot.Send(m.Sender, "_–ë–æ—Ç —ç—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç_\n–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ gif'–∫—É", markdown)
	})

	bot.Handle(tb.OnSticker, func(m *tb.Message) {
		bot.Send(m.Sender, "_–ë–æ—Ç—É –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä_\n–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ gif'–∫—É", markdown)
	})

	bot.Handle(tb.OnVoice, func(m *tb.Message) {
		bot.Send(m.Sender, "_–ë–æ—Ç —ç—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç_\n–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ gif'–∫—É", markdown)
	})

	bot.Handle(tb.OnVideoNote, func(m *tb.Message) {
		bot.Send(m.Sender, "_–ë–æ—Ç —ç—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç_\n–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ gif'–∫—É", markdown)
	})

	// 	_, ok := actions[m.Text]
	// 	if ok {
	// 		actions[m.Text](bot, m)
	// 	} else {
	// 		bot.Send(m.Sender, "_–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é_", markdown)
	// 	}
	// })

	bot.Start()
}
