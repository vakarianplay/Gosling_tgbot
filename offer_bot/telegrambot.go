package main

import (
	"encoding/csv"
	"log"
	"os"
	"strconv"

	tb "gopkg.in/tucnak/telebot.v2"
)

var userFile string
var contentDir string

var markdown *tb.SendOptions

// func doesIDExist(userID int) bool {

// 	content, err := os.ReadFile(userFile)
// 	if err != nil {
// 		log.Println(err)
// 		return false
// 	}

// 	lines := strings.Split(string(content), "\n")

// 	for _, line := range lines {
// 		id, _ := strconv.Atoi(line)
// 		if id == userID {
// 			return true
// 		}
// 	}
// 	return false
// }

func doesIDExist(userID int) bool {
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º CSV-—Ñ–∞–π–ª.
	file, err := os.Open(userFile)
	if err != nil {
		return false
	}
	defer file.Close()

	// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ CSV.
	reader := csv.NewReader(file)
	records, err := reader.ReadAll()
	if err != nil {
		return false
	}

	// –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ CSV-—Ñ–∞–π–ª–∞.
	for _, record := range records {
		if len(record) > 0 {
			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏ (ID) –≤ int.
			id, err := strconv.Atoi(record[0])
			if err != nil {
				// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ ID –Ω–µ–ª—å–∑—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ.
				continue
			}
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ ID.
			if id == userID {
				return true
			}
		}
	}

	// –ï—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false.
	return false
}

func saveUser(m *tb.Message) {
	if !doesIDExist(int(m.Sender.ID)) {
		file, err := os.OpenFile(userFile, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0644)
		if err != nil {
			log.Println(err)
			return
		}
		defer file.Close()

		name := m.Sender.FirstName + " " + m.Sender.LastName
		_, err = file.WriteString(strconv.Itoa(int(m.Sender.ID)) + "," + m.Sender.Username + "," + name + "\n")
		if err != nil {
			log.Println(err)
			return
		}

		log.Println("Add new user:", m.Sender.ID)
	}
}

func TelegramBot(botApi, content_, users_ string) {

	userFile = users_

	// actions := map[string]func(bot *tb.Bot, m *tb.Message){
	// 	"üíé –ì–æ—Å–ª–∏–Ω–≥, –¥–∞–π –º–Ω–µ –º—É–¥—Ä–æ—Å—Ç—å üíé": sendGoslingPic,
	// 	"‚Ñπ –û –±–æ—Ç–µ ‚Ñπ":              sendInfo,
	// 	"‚ú® –ì–æ—Å–ª–∏–Ω–≥, –¥–∞–π —Ü–∏—Ç–∞—Ç—É ‚ú®": sendGoslingLine,
	// 	"–Æ–∑–µ—Ä—ã": sendUsers,
	// }

	botToken := botApi

	menu := &tb.ReplyMarkup{ResizeReplyKeyboard: true}
	btnSendPic := menu.Text("üíé –ì–æ—Å–ª–∏–Ω–≥, –¥–∞–π –º–Ω–µ –º—É–¥—Ä–æ—Å—Ç—å üíé")
	btnAbout := menu.Text("‚Ñπ –û –±–æ—Ç–µ ‚Ñπ")
	btnGetLine := menu.Text("‚ú® –ì–æ—Å–ª–∏–Ω–≥, –¥–∞–π —Ü–∏—Ç–∞—Ç—É ‚ú®")

	menu.Reply(
		menu.Row(btnSendPic, btnGetLine),
		menu.Row(btnAbout),
	)

	markdown = &tb.SendOptions{
		ParseMode: tb.ModeMarkdown,
	}

	bot, err := tb.NewBot(tb.Settings{
		Token:  botToken,
		Poller: &tb.LongPoller{Timeout: 10},
	})
	if err != nil {
		log.Fatal(err)
	}

	bot.Handle(tb.OnUserJoined, func(m *tb.Message) {
		saveUser(m)
	})

	bot.Handle("/start", func(m *tb.Message) {

		saveUser(m)
		userName := m.Sender.FirstName + " " + m.Sender.LastName
		bot.Send(m.Sender, "*–ü—Ä–∏–≤–µ—Ç, "+userName+"*\n\n_–≠—Ç–æ—Ç –±–æ—Ç - –º—É–¥—Ä–æ—Å—Ç—å –†–∞–π–∞–Ω–∞ –ì–æ—Å–ª–∏–Ω–≥–∞._\n–ü—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –¥–∞—Ç—å —Ç–µ–±–µ –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç.", markdown)
		bot.Send(m.Sender, "üåê–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN: *https://raspad.space/vpn https://t.me/raspad_vpn*", markdown)
		bot.Send(m.Sender, "‚Üì –≤—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì", menu)

	})

	// bot.Handle(tb.OnText, func(m *tb.Message) {

	// 	_, ok := actions[m.Text]
	// 	if ok {
	// 		actions[m.Text](bot, m)
	// 	} else {
	// 		bot.Send(m.Sender, "_–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é_", markdown)
	// 	}
	// })

	bot.Start()
}
