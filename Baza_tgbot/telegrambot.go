package main

import (
	"database/sql"
	"log"
	"strconv"
	"strings"

	_ "github.com/mattn/go-sqlite3"
	tb "gopkg.in/tucnak/telebot.v2"
)

var markdown *tb.SendOptions

var db *sql.DB

func doesIDExist(userID int) bool {
	qExist := strings.Replace(Qexist, "{id}", strconv.Itoa(userID), -1)
	result, err := db.Query(qExist)
	if err != nil {
		panic(err)
	}
	defer result.Close()

	var flagEx bool
	result.Next()
	if err := result.Scan(&flagEx); err != nil {
		panic(err)
	}
	return flagEx
}

func saveUser(userID int, userName string) {

	qAdd := strings.Replace(QaddUser, "{id}", strconv.Itoa(userID), -1)
	qAdd = strings.Replace(qAdd, "{username}", userName, -1)
	log.Println("Add new user: ", qAdd, "   ", doesIDExist(userID))
	if !doesIDExist(userID) {
		db.Exec(qAdd)
	}
}

func sendUsers(bot *tb.Bot, m *tb.Message) {
	qCount := strings.Replace(Qcounter, "{table}", "users", -1)
	result, err := db.Query(qCount)
	if err != nil {
		panic(err)
	}
	defer result.Close()

	var count string
	result.Next()
	if err := result.Scan(&count); err != nil {
		panic(err)
	}

	log.Println("Users count: " + count)
	bot.Send(m.Sender, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤:\n*"+count+"*", markdown)

}

func sendInfo(bot *tb.Bot, m *tb.Message) {
	firstLine := "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏ mGPT, –æ–±—É—á–µ–Ω–Ω–æ–π –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –∏–∑ _—Ñ–∏–ª–æ—Å–æ–≤—Å–∫–∏—Ö –∏ –ø–∞—Ü–∞–Ω—Å–∫–∏—Ö_ —Ü–∏—Ç–∞—Ç–Ω–∏–∫–æ–≤. –ö–∞—Ä—Ç–∏–Ω–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã Stable Diffusion."
	secondLine := "*–ê–≤—Ç–æ—Ä: https://t.me/cyberbibki*\n\n–°–∞–π—Ç –∞–≤—Ç–æ—Ä–∞: https://vakarian.website\nGitHub: https://github.com/vakarianplay \n\n üåê–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN: *https://raspad.space/vpn*\n\n"
	thirdLine := "–ë–æ—Ç —Å —Ñ—Ä–∞–∑–∞–º–∏ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: *@neuralbisakbot*"

	bot.Send(m.Sender, firstLine, markdown)
	bot.Send(m.Sender, secondLine+thirdLine, markdown)
	sendUsers(bot, m)
	// bot.Send(m.Sender, thirdLine, markdown)
}

// func sendGoslingPic(bot *tb.Bot, m *tb.Message) {
// 	msg, _ := bot.Send(m.Sender, "‚åõÔ∏è–ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ì–æ—Å–ª–∏–Ω–≥ –¥—É–º–∞–µ—Ç...")

// 	file, err := os.Open("out.png")
// 	if err != nil {
// 		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞:", err)
// 	}
// 	defer file.Close()

// 	caption := "üåÖ –ú—É–¥—Ä–æ—Å—Ç—å –æ—Ç –ì–æ—Å–ª–∏–Ω–≥–∞ _@goslingatorbot_"

// 	photo := &tb.Photo{File: tb.FromReader(file), Caption: caption}

// 	bot.Send(m.Sender, photo, markdown)
// 	bot.Delete(msg)
// }

func sendBaseLine(bot *tb.Bot, m *tb.Message) {
	qRnd := strings.Replace(QgetRandom, "{table}", "content", -1)
	result, err := db.Query(qRnd)
	if err != nil {
		panic(err)
	}
	defer result.Close()

	var id int
	var baseLine string
	var author string
	result.Next()
	if err := result.Scan(&id, &baseLine, &author); err != nil {
		panic(err)
	}
	ans := baseLine + "\n\nüëÄ –ê–≤—Ç–æ—Ä: " + author
	bot.Send(m.Sender, ans)
}

func saveBaseLine(bot *tb.Bot, m *tb.Message) {
	bot.Send(m.Sender, "–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ—é _–ë–ê–ó–£_ –∏–ª–∏ –∞–Ω–µ–∫–¥–æ—Ç, –∞ —è –µ–≥–æ –∑–∞–ø–æ–º–Ω—é", markdown)
}

func saveLine(bot *tb.Bot, m *tb.Message) {
	author := m.Sender.FirstName
	baseLine := m.Text

	qAdd := strings.Replace(QaddRecord, "{text}", baseLine, -1)
	qAdd = strings.Replace(qAdd, "{author}", author, -1)
	log.Println("Record: ", qAdd)
	db.Exec(qAdd)

	bot.Send(m.Sender, "‚úèÔ∏è *–ë–ê–ó–£ –ó–ê–ü–ò–°–ê–õ* ‚úèÔ∏è", markdown)
}

func TelegramBot(botApi string, db_ *sql.DB) {

	// userFile = userFile_
	db = db_

	actions := map[string]func(bot *tb.Bot, m *tb.Message){
		"üíé –í—ã–¥–∞–π –±–∞–∑—É üíé":   sendBaseLine,
		"‚Ñπ –û –±–æ—Ç–µ ‚Ñπ":       sendInfo,
		"üíæ –ó–∞–ø–æ–º–Ω–∏ –±–∞–∑—É üíæ": saveBaseLine,
		// "–Æ–∑–µ—Ä—ã": sendUsers,
	}

	botToken := botApi

	menu := &tb.ReplyMarkup{ResizeReplyKeyboard: true}
	btnSendPic := menu.Text("üíé –í—ã–¥–∞–π –±–∞–∑—É üíé")
	btnAbout := menu.Text("‚Ñπ –û –±–æ—Ç–µ ‚Ñπ")
	btnGetLine := menu.Text("üíæ –ó–∞–ø–æ–º–Ω–∏ –±–∞–∑—É üíæ")

	menu.Reply(
		menu.Row(btnSendPic, btnGetLine),
		menu.Row(btnAbout),
	)

	markdown = &tb.SendOptions{
		ParseMode: tb.ModeMarkdown,
	}

	bot, err := tb.NewBot(tb.Settings{
		Token:  botToken,
		Poller: &tb.LongPoller{Timeout: 10},
	})
	if err != nil {
		log.Fatal(err)
	}

	bot.Handle(tb.OnUserJoined, func(m *tb.Message) {
		saveUser(int(m.Sender.ID), m.Sender.Username)
	})

	bot.Handle("/start", func(m *tb.Message) {

		saveUser(int(m.Sender.ID), m.Sender.Username)
		userName := m.Sender.FirstName
		// bot.Send(m.Sender, "*–ü—Ä–∏–≤–µ—Ç, "+ userName +"*\n\n_–≠—Ç–æ—Ç –±–æ—Ç –æ—á–µ–Ω—å –±–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.\n", markdown)
		bot.Send(m.Sender, "*ü§ò –ü—Ä–∏–≤–µ—Ç, "+userName+"* ü§ò\n\n_–≠—Ç–æ—Ç –±–æ—Ç –æ—á–µ–Ω—å –±–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π._", markdown)
		bot.Send(m.Sender, "_–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –±–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ_ –∏–ª–∏ *–∞–Ω–µ–∫–¥–æ—Ç*, –∞ —è –ø–æ–∫–∞–∂—É –µ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.\n\n–ò–ª–∏ –≤—ã–¥–∞–º –±–∞–∑—É –ø–æ –∑–∞–ø—Ä–æ—Å—É", markdown)
		bot.Send(m.Sender, "‚Üì –≤—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì", menu)

	})

	bot.Handle(tb.OnText, func(m *tb.Message) {

		_, ok := actions[m.Text]
		if ok {
			actions[m.Text](bot, m)
		} else {
			// bot.Send(m.Sender, "*–ë–ê–ó–£ –ó–ê–ü–ò–°–ê–õ*", markdown)
			saveLine(bot, m)
		}
	})

	bot.Start()

}
