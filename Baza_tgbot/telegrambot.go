package main

import (
	"database/sql"
	"log"
	"strconv"
	"strings"

	_ "github.com/mattn/go-sqlite3"
	tb "gopkg.in/tucnak/telebot.v2"
)

var markdown *tb.SendOptions

var db *sql.DB

func doesIDExist(userID int) bool {
	qExist := strings.Replace(Qexist, "{id}", strconv.Itoa(userID), -1)
	result, err := db.Query(qExist)
	if err != nil {
		panic(err)
	}
	defer result.Close()

	var flagEx bool
	result.Next()
	if err := result.Scan(&flagEx); err != nil {
		panic(err)
	}
	return flagEx
}

func saveUser(userID int, userName string) {
	qAdd := strings.Replace(QaddUser, "{id}", strconv.Itoa(userID), -1)
	qAdd = strings.Replace(qAdd, "{username}", userName, -1)
	log.Println("Add new user: ", qAdd, "   ", doesIDExist(userID))
	if !doesIDExist(userID) {
		db.Exec(qAdd)
	}
}

func sendUsers(bot *tb.Bot, m *tb.Message) {
	countUsers := strconv.Itoa(countQuery("users"))
	countRecords := strconv.Itoa(countQuery("content"))
	log.Println("Users count: " + countUsers + "Records: " + countRecords)
	bot.Send(m.Sender, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤:\n*"+countUsers+"*\n\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑:\n*"+countRecords+"*", markdown)
}

func countQuery(table string) int {
	qCount := strings.Replace(Qcounter, "{table}", table, -1)
	result, err := db.Query(qCount)
	if err != nil {
		panic(err)
	}
	defer result.Close()

	var count int
	result.Next()
	if err := result.Scan(&count); err != nil {
		panic(err)
	}
	return count
}

func sendInfo(bot *tb.Bot, m *tb.Message) {
	firstLine := "*–ê–≤—Ç–æ—Ä: https://t.me/cyberbibki*\n\n–°–∞–π—Ç –∞–≤—Ç–æ—Ä–∞: https://vakarian.website\nGitHub: https://github.com/vakarianplay \n\n üåê–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN: *https://raspad.space/vpn*\n\n"
	secondLine := "–ú—É–¥—Ä–æ—Å—Ç—å –æ—Ç –†–∞–π–∞–Ω–∞ –ì–æ—Å–ª–∏–Ω–≥–∞: *@goslingatorbot \n*"
	thirdLine := "–ë–æ—Ç —Å —Ñ—Ä–∞–∑–∞–º–∏ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: *@neuralbisakbot*"

	bot.Send(m.Sender, firstLine, markdown)
	bot.Send(m.Sender, secondLine+thirdLine, markdown)
	sendUsers(bot, m)
	// bot.Send(m.Sender, thirdLine, markdown)
}

func sendBaseLine(bot *tb.Bot, m *tb.Message) {
	qRnd := strings.Replace(QgetRandom, "{table}", "content", -1)
	result, err := db.Query(qRnd)
	if err != nil {
		panic(err)
	}
	defer result.Close()

	var id int
	var baseLine string
	var author string
	var tgid string
	result.Next()
	if err := result.Scan(&id, &baseLine, &author, &tgid); err != nil {
		panic(err)
	}
	ans := baseLine + "\n\nüëÄ –ê–≤—Ç–æ—Ä: " + author
	bot.Send(m.Sender, ans)
}

func saveBaseLine(bot *tb.Bot, m *tb.Message) {
	bot.Send(m.Sender, "–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ—é _–ë–ê–ó–£_ –∏–ª–∏ –∞–Ω–µ–∫–¥–æ—Ç, –∞ —è –µ–≥–æ –∑–∞–ø–æ–º–Ω—é", markdown)
}

func saveLine(bot *tb.Bot, m *tb.Message) {
	author := m.Sender.FirstName + " " + m.Sender.LastName
	tgid := int(m.Sender.ID)
	baseLine := m.Text

	if !strings.HasPrefix(baseLine, "/") && len(baseLine) > 15 && len(baseLine) < 512 {
		qAdd := strings.Replace(QaddRecord, "{text}", baseLine, -1)
		qAdd = strings.Replace(qAdd, "{author}", author, -1)
		qAdd = strings.Replace(qAdd, "{tgid}", strconv.Itoa(tgid), -1)
		log.Println("Record: ", qAdd)
		db.Exec(qAdd)

		bot.Send(m.Sender, "‚úèÔ∏è *–ë–ê–ó–£ –ó–ê–ü–ò–°–ê–õ* ‚úèÔ∏è", markdown)
	} else {
		wrongAns := "üíÄ " + author + " *\n–¢–´ –ù–ï –í–´–î–ê–õ –ë–ê–ó–£!*\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–µ—à—å –±–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º."
		bot.Send(m.Sender, wrongAns, markdown)
	}
}

func getBaseById(bot *tb.Bot, m *tb.Message) {
	var listBase string

	tgid := int(m.Sender.ID)
	qGet := strings.Replace(QgetById, "{tgid}", strconv.Itoa(tgid), -1)
	result, err := db.Query(qGet)
	if err != nil {
		panic(err)
	}
	defer result.Close()

	for result.Next() {
		var id int
		var baseLine string
		var author string
		var tgid string
		if err := result.Scan(&id, &baseLine, &author, &tgid); err != nil {
			panic(err)
		}

		// –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏.
		// fmt.Printf("ID: %d, Title: %s, Body: %s\n", id, text, author
		oneLine := "id: `" + strconv.Itoa(id) + "` \n"
		mainLine := baseLine + "\n\n"
		listBase = listBase + oneLine + mainLine
	}

	headerLine := "–≠—Ç–æ —Ç–≤–æ–∏ –±–∞–∑—ã, " + m.Sender.FirstName + " " + m.Sender.LastName + "\n_–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /delete <id> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è._"
	bot.Send(m.Sender, headerLine, markdown)

	runes := []rune(listBase)
	totalRunes := len(runes)
	for i := 0; i < totalRunes; i += 4000 {
		end := i + 4000
		if end > totalRunes {
			end = totalRunes
		}
		part := string(runes[i:end])
		bot.Send(m.Sender, part, markdown)
	}
}

func delBaseLine(bot *tb.Bot, m *tb.Message, recId int) {
	stRecs := countQuery("content")

	tgid := int(m.Sender.ID)
	qDel := strings.Replace(QdelById, "{tgid}", strconv.Itoa(tgid), -1)
	qDel = strings.Replace(qDel, "{recid}", strconv.Itoa(recId), -1)
	log.Println("delete rec: " + qDel)
	db.Exec(qDel)

	endRecs := countQuery("content")

	if stRecs > endRecs {
		bot.Send(m.Sender, "_–ë–ê–óA_ —É–¥–∞–ª–µ–Ω–∞ ‚ôªÔ∏è", markdown)
	} else {
		bot.Send(m.Sender, "üö´ –¢–ï–ë–ï –°–Æ–î–ê –ù–ï–õ–¨–ó–Ø \n–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –±–∞–∑–∞!", markdown)
	}
}

func TelegramBot(botApi string, db_ *sql.DB) {

	// userFile = userFile_
	db = db_

	actions := map[string]func(bot *tb.Bot, m *tb.Message){
		"üíé –í—ã–¥–∞–π –±–∞–∑—É üíé":   sendBaseLine,
		"‚Ñπ –û –±–æ—Ç–µ ‚Ñπ":       sendInfo,
		"üíæ –ó–∞–ø–æ–º–Ω–∏ –±–∞–∑—É üíæ": saveBaseLine,
		"üìÑ –ú–æ–∏ –±–∞–∑—ã üìÑ":     getBaseById,
		// "–Æ–∑–µ—Ä—ã": sendUsers,
	}

	botToken := botApi

	menu := &tb.ReplyMarkup{ResizeReplyKeyboard: true}
	btnSendPic := menu.Text("üíé –í—ã–¥–∞–π –±–∞–∑—É üíé")
	btnAbout := menu.Text("‚Ñπ –û –±–æ—Ç–µ ‚Ñπ")
	btnGetLine := menu.Text("üíæ –ó–∞–ø–æ–º–Ω–∏ –±–∞–∑—É üíæ")
	btnGetBase := menu.Text("üìÑ –ú–æ–∏ –±–∞–∑—ã üìÑ")

	menu.Reply(
		menu.Row(btnSendPic, btnGetLine),
		menu.Row(btnGetBase, btnAbout),
	)

	markdown = &tb.SendOptions{
		ParseMode: tb.ModeMarkdown,
	}

	bot, err := tb.NewBot(tb.Settings{
		Token:  botToken,
		Poller: &tb.LongPoller{Timeout: 10},
	})
	if err != nil {
		log.Fatal(err)
	}

	bot.Handle(tb.OnUserJoined, func(m *tb.Message) {
		saveUser(int(m.Sender.ID), m.Sender.Username)
	})

	bot.Handle("/start", func(m *tb.Message) {

		saveUser(int(m.Sender.ID), m.Sender.Username)
		userName := m.Sender.FirstName + " " + m.Sender.LastName
		// bot.Send(m.Sender, "*–ü—Ä–∏–≤–µ—Ç, "+ userName +"*\n\n_–≠—Ç–æ—Ç –±–æ—Ç –æ—á–µ–Ω—å –±–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.\n", markdown)
		bot.Send(m.Sender, "*ü§ò –ü—Ä–∏–≤–µ—Ç, "+userName+"* ü§ò\n\n_–≠—Ç–æ—Ç –±–æ—Ç –æ—á–µ–Ω—å –±–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π._", markdown)
		bot.Send(m.Sender, "_–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –±–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ_ –∏–ª–∏ *–∞–Ω–µ–∫–¥–æ—Ç*, –∞ —è –ø–æ–∫–∞–∂—É –µ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.\n\n–ò–ª–∏ –≤—ã–¥–∞–º –±–∞–∑—É –ø–æ –∑–∞–ø—Ä–æ—Å—É", markdown)
		bot.Send(m.Sender, "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n/delete `<id>` - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n/mybases - —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –±–∞–∑")
		bot.Send(m.Sender, "‚Üì –≤—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì", menu)

	})

	bot.Handle("/help", func(m *tb.Message) {
		bot.Send(m.Sender, "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n/delete `<id>` - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n/mybases - —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –±–∞–∑")
	})

	bot.Handle("/mybases", func(m *tb.Message) {
		getBaseById(bot, m)
	})

	bot.Handle("/delete", func(m *tb.Message) {
		args := m.Payload
		recId, err := strconv.Atoi(args)
		if err != nil {
			bot.Send(m.Sender, "–≠–π –¥—Ä—É–∂–æ–∫-–ø–∏—Ä–æ–∂–æ–∫, —Ç—ã –æ—à–∏–±—Å—è –∫–æ–º–∞–Ω–¥–æ–π.\n–°–º–æ—Ç—Ä–∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /help")
			return
		}
		delBaseLine(bot, m, recId)
	})

	bot.Handle(tb.OnText, func(m *tb.Message) {

		_, ok := actions[m.Text]
		if ok {
			actions[m.Text](bot, m)
		} else {
			// bot.Send(m.Sender, "*–ë–ê–ó–£ –ó–ê–ü–ò–°–ê–õ*", markdown)
			saveLine(bot, m)
		}
	})

	bot.Start()

}
